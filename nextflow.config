// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

manifest {
    homePage = 'http://github.com/edgano/nf_regressive_modules'
    description = 'This repository aims to group all the new modes of the Regressive algorithm'
    mainScript = 'main.nf'
}

// Temporary
env {
    PYTHONPATH = "/home/cmcwhite:\$PYTHONPATH"
    PATH =  "/usr/licensed/anaconda3/2020.11/bin/:/usr/bin/:/usr/bin/python3/:\$PATH"
    CUDA_VISIBLE_DEVICES='${CUDA_VISIBLE_DEVICES:-1}'
    NXF_SINGULARITY_CACHEDIR='/scratch/gpfs/cmcwhite/singularity_cache'
}


// Global default params, used in configs
params {
    metadir = './metainfo'
    email = ''
    email_on_fail = false
    tracedir = "${params.metadir}/pipeline_info"
}

// CDM added
process {
    withName:PROG_ALIGNER {
      container =  'file:///scratch/gpfs/cmcwhite/tcoffee_pdb.sif'
    }
    withName:EVAL_ALIGNMENT {
      container =  'file:///scratch/gpfs/cmcwhite/tcoffee_pdb.sif'
    }


    withName:EASEL_INFO {
        container = 'file:///scratch/gpfs/cmcwhite/edgano-hmmer-latest.sif'
    }
    withName:GAPS_PROGRESSIVE {
        //container = 'file:///scratch/gpfs/cmcwhite/hf_docker_latest.sif'
        container = 'file:///scratch/gpfs/cmcwhite/edgano-base-latest.sif'
    }
    withName:METRICS {
        container = 'file:///scratch/gpfs/cmcwhite/edgano-base-latest.sif'
    }

    withName:TREE_GENERATION{
      container =  'file:///scratch/gpfs/cmcwhite/tcoffee_pdb.sif'
    }

   
    withName:SEMANTIC_ALIGNER {
        container = 'file:///scratch/gpfs/cmcwhite/hf_docker_latest.sif'
   }
 
   withName:EMBED_GENERATION {
        container = 'file:///scratch/gpfs/cmcwhite/hf_docker_latest.sif'
        containerOptions = '--nv --env CUDA_VISIBLE_DEVICES=$CUDA_VISIBLE_DEVICES'
   }




}



profiles {
  //conda { process.conda = "$baseDir/environment.yml" }
  //conda { process.conda = "/home/cmcwhite/.conda/envs/hf-transformers" }
  // conda { process.conda = "/home/cmcwhite/environment.yml" }
 
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true 
           docker.scratch = true }
  singularity {  envWhitelist = 'CUDA_VISIBLE_DEVICES'
                 enabled = true
                 autoMounts = true 
                 runOptions = '--nv'
                 singularity.cacheDir='/scratch/gpfs/cmcwhite/singularity_cache'}

}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

tower {
  accessToken = 'f11857c4ae7a82ddab1cd9fc9860bf15db63af86'
  enabled = false
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
//docker.runOptions = '-u \$(id -u):\$(id -g)'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
